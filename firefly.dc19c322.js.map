{"mappings":"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","sources":["scripts-firefly.js"],"sourcesContent":["// Configuration\r\nconst CONFIG = {\r\n    curveIntervalMin: 300, // Minimum curve interval in ms\r\n    curveIntervalMax: 1700, // Maximum curve interval in ms\r\n    initialDistanceMultiplier: 1, // Multiplier for initial distance based on loudness\r\n    nodeDistanceMin: 0.01, // Minimum distance between nodes in fly size units\r\n    nodeDistanceMax: 0.1, // Maximum distance between nodes in fly size units\r\n    controlPointMultiplier: 1, // Multiplier for random control point offset\r\n    controlPointWeightMin: 0.1, // Minimum weight (10%)\r\n    controlPointWeightMax: 0.8, // Maximum weight (80%)\r\n    controlPointOffsetMin: 0.2, // Minimum offset factor (20%)\r\n    controlPointOffsetMax: 2.0, // Maximum offset factor (200%)\r\n    movementSpeed: 0.2, // Speed of movement along Bezier curve\r\n    frameTime: 16.67, // Approximate time per frame at 60 FPS\r\n    fireflySize: 10, // Default size of each firefly\r\n    numFireflies: 500, // Total number of fireflies\r\n    redundancyFactor: 2, // Two fireflies per frequency for redundancy\r\n    fftSize: 1024, // Default FFT size\r\n\tblinkIntervalMin: 100, // Minimum blink interval in ms (0.1s)\r\n\tblinkIntervalMax: 1000, // Maximum blink interval in ms (1s)\r\n\tloudnessScaleMin: 25, // Minimum lifespan scaling from loudness\r\n\tloudnessScaleMax: 300, // Maximum lifespan scaling from loudness\r\n\tloudnessThreshold: 0.25, // Minimum loudness (5%) to activate flies\r\n    lifespanThreshold: 0.75, // Midpoint for the response curve (default: 75% loudness)\r\n    responseTypeBelow: \"linear\", // Type of scaling below midpoint (e.g., \"quadratic\", \"linear\")\r\n    responseTypeAbove: \"hyperExponential\",     // Type of scaling above midpoint (e.g., \"cubic\", \"exponential\")\r\n    debugFlightPath: true,\r\n};\r\n\r\n// Globals\r\nlet audioContext = null;\r\nlet audioSource = null;\r\nlet leftAnalyser = null;\r\nlet rightAnalyser = null;\r\nlet animationFrameId = null;\r\n\r\nconst fireflies = [];\r\nlet leftFrequencyData = [];\r\nlet rightFrequencyData = [];\r\n\r\n// Canvas Setup\r\nconst canvas = document.getElementById('fireflyCanvas');\r\nconst ctx = canvas.getContext('2d');\r\ncanvas.width = window.innerWidth;\r\ncanvas.height = window.innerHeight;\r\n\r\n// Helper to clamp positions within screen bounds\r\nfunction clampPosition(value, min, max) {\r\n    return Math.max(min, Math.min(max, value));\r\n}\r\n\r\n// Resets a firefly's properties when lifespan ends\r\nfunction resetFirefly(firefly, frequencyData) {\r\n    firefly.fixedLoudness = frequencyData[firefly.frequencyIndex] / 255; // Normalize loudness\r\n\r\n    if (firefly.fixedLoudness < CONFIG.loudnessThreshold) {\r\n        firefly.lifeSpan = 0; // Deactivate the fly\r\n        return; // Skip further initialization\r\n    }\r\n\r\n    const scaledLoudness = responseCurve(firefly.fixedLoudness);\r\n    firefly.lifeSpan = CONFIG.loudnessScaleMin +\r\n        scaledLoudness * (CONFIG.loudnessScaleMax - CONFIG.loudnessScaleMin);\r\n\r\n    // Reset to fixed origin for this firefly\r\n    firefly.pointOriginX = firefly.originX; // Reset pointOrigin to initial origin\r\n    firefly.pointOriginY = firefly.originY;\r\n\r\n    firefly.x = firefly.originX;\r\n    firefly.y = firefly.originY;\r\n\r\n    const screenFactor = Math.min(window.innerWidth, window.innerHeight);\r\n    const defaultDistance =\r\n        screenFactor *\r\n        (CONFIG.nodeDistanceMin +\r\n            Math.random() * (CONFIG.nodeDistanceMax - CONFIG.nodeDistanceMin));\r\n    const loudnessFactor = 1 + firefly.fixedLoudness;\r\n    const initialDistance =\r\n        defaultDistance * loudnessFactor * CONFIG.initialDistanceMultiplier;\r\n\r\n    // Decide upward or downward direction (50-50 chance)\r\n    const baseAngle = Math.random() < 0.5 ? -90 : 90; // Upward (-90°) or Downward (90°)\r\n\r\n    // Add random deviation of ±10 degrees\r\n    const deviation = Math.random() * 40 - 20; // Random value between -10 and +10 degrees\r\n    const angle = (baseAngle + deviation) * (Math.PI / 180); // Convert to radians\r\n\r\n    // Calculate target positions\r\n    firefly.targetX = clampPosition(\r\n        firefly.x + initialDistance * Math.cos(angle),\r\n        0,\r\n        window.innerWidth\r\n    );\r\n    firefly.targetY = clampPosition(\r\n        firefly.y + initialDistance * Math.sin(angle),\r\n        0,\r\n        window.innerHeight\r\n    );\r\n\r\n    const { controlX, controlY } = calculateControlPoints({\r\n        originX: firefly.pointOriginX, // Use pointOrigin for the curve\r\n        originY: firefly.pointOriginY,\r\n        targetX: firefly.targetX,\r\n        targetY: firefly.targetY,\r\n        distance: initialDistance,\r\n    });\r\n\r\n    firefly.controlX = controlX;\r\n    firefly.controlY = controlY;\r\n\r\n    firefly.curveTimer = 0;\r\n    firefly.curveInterval =\r\n        CONFIG.curveIntervalMin +\r\n        Math.random() * (CONFIG.curveIntervalMax - CONFIG.curveIntervalMin); // Random interval\r\n    firefly.glowIntensity = firefly.fixedLoudness;\r\n}\r\n\r\n// Generates a new target position and control point for a firefly\r\nfunction generateTargetPosition(firefly) {\r\n    firefly.pointOriginX = firefly.x; // Update pointOrigin to current position\r\n    firefly.pointOriginY = firefly.y;\r\n\r\n    const screenFactor = Math.min(window.innerWidth, window.innerHeight);\r\n    const defaultDistance =\r\n        screenFactor *\r\n        (CONFIG.nodeDistanceMin +\r\n            Math.random() * (CONFIG.nodeDistanceMax - CONFIG.nodeDistanceMin));\r\n    const loudnessFactor = 1 + firefly.fixedLoudness; // Scale: 1 (0% loudness) to 2 (100% loudness)\r\n    const distance = defaultDistance * loudnessFactor * CONFIG.initialDistanceMultiplier;\r\n\r\n    const angle = Math.random() * 360;\r\n    const radians = angle * (Math.PI / 180);\r\n\r\n    firefly.targetX = clampPosition(\r\n        firefly.pointOriginX + distance * Math.cos(radians),\r\n        0,\r\n        window.innerWidth\r\n    );\r\n    firefly.targetY = clampPosition(\r\n        firefly.pointOriginY + distance * Math.sin(radians),\r\n        0,\r\n        window.innerHeight\r\n    );\r\n\r\n    const { controlX, controlY } = calculateControlPoints({\r\n        originX: firefly.pointOriginX,\r\n        originY: firefly.pointOriginY,\r\n        targetX: firefly.targetX,\r\n        targetY: firefly.targetY,\r\n        distance,\r\n    });\r\n\r\n    firefly.controlX = controlX;\r\n    firefly.controlY = controlY;\r\n}\r\n\r\n\r\n// Update fireflies' properties based on audio and movement logic\r\nfunction updateFireflies() {\r\n    fireflies.forEach(firefly => {\r\n        const frequencyData = firefly.channel === 'left' ? leftFrequencyData : rightFrequencyData;\r\n\r\n\t\tif (firefly.lifeSpan <= 0 && firefly.blinkTimer >= firefly.blinkInterval) {\r\n\t\t\tresetFirefly(firefly, frequencyData); // Reset only after last blink completes\r\n\t\t\tfirefly.blinkTimer = 0; // Reset timer\r\n\t\t\tfirefly.blinkInterval =\r\n\t\t\t\tCONFIG.blinkIntervalMin +\r\n\t\t\t\tMath.random() * (CONFIG.blinkIntervalMax - CONFIG.blinkIntervalMin);\r\n\t\t\tfirefly.blinkProgress = 0;\r\n\t\t}\r\n\r\n        firefly.curveTimer += CONFIG.frameTime;\r\n\r\n\t\tif (firefly.curveTimer >= firefly.curveInterval) {\r\n\t\t\tfirefly.curveTimer = 0;\r\n\t\t\tgenerateTargetPosition(firefly); // Generate new target\r\n\t\t\tfirefly.curveProgress = 0; // Reset curve progress\r\n\t\t}\r\n\r\n\t\t// Increment movement progress\r\n\t\tfirefly.curveProgress += CONFIG.movementSpeed * CONFIG.frameTime / 1000;\r\n\r\n\t\tmoveAlongBezierCurve({\r\n\t\t\tfirefly,\r\n\t\t\toriginX: firefly.pointOriginX, // Use pointOrigin for movement\r\n\t\t\toriginY: firefly.pointOriginY,\r\n\t\t\tcontrolX: firefly.controlX,\r\n\t\t\tcontrolY: firefly.controlY,\r\n\t\t\ttargetX: firefly.targetX,\r\n\t\t\ttargetY: firefly.targetY,\r\n\t\t\tprogress: firefly.curveProgress,\r\n\t\t});\r\n\r\n\t\tif (firefly.blinkTimer < firefly.blinkInterval) {\r\n\t\t\tfirefly.blinkTimer += CONFIG.frameTime; // Continue blinking\r\n\t\t\tconst blinkT = firefly.blinkTimer / firefly.blinkInterval;\r\n\t\t\tfirefly.blinkProgress =\r\n\t\t\t\tblinkT <= 0.5\r\n\t\t\t\t\t? easingFunction(blinkT * 2)\r\n\t\t\t\t\t: easingFunction(2 - blinkT * 2);\r\n\t\t} else {\r\n\t\t\tfirefly.blinkTimer = 0; // Reset timer\r\n\t\t\tfirefly.blinkInterval =\r\n\t\t\t\tCONFIG.blinkIntervalMin +\r\n\t\t\t\tMath.random() * (CONFIG.blinkIntervalMax - CONFIG.blinkIntervalMin); // Randomize new interval\r\n\t\t}\r\n\r\n        if (firefly.lifeSpan > 0) {\r\n            firefly.lifeSpan -= 1;\r\n        } else {\r\n            firefly.glowIntensity = 0;\r\n        }\r\n    });\r\n}\r\n\r\n\r\n// Render fireflies to the canvas\r\nfunction renderFireflies() {\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    fireflies.forEach((firefly, index) => {\r\n        if (firefly.lifeSpan > 0) { // Only render active fireflies\r\n            const fireFlySize = firefly.size * 2; // Adjusted firefly size for glow\r\n            const blinkOpacity = firefly.blinkProgress * firefly.glowIntensity; // Scaled by blink progress\r\n\r\n            ctx.save();\r\n            ctx.translate(firefly.x, firefly.y); // Move canvas to firefly position\r\n            ctx.rotate(firefly.angle); // Rotate canvas to align with movement direction\r\n\r\n            // Draw Glow (circular)\r\n            const gradient = ctx.createRadialGradient(\r\n                0, 0, 0, // Inner circle (center)\r\n                0, 0, fireFlySize // Outer circle (edge of the glow)\r\n            );\r\n            gradient.addColorStop(0, `rgba(255, 255, 255, ${blinkOpacity})`);\r\n            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n            ctx.fillStyle = gradient;\r\n            ctx.beginPath();\r\n            ctx.arc(0, 0, fireFlySize, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            // Draw Body (smaller oval)\r\n            const bodyOpacity = Math.min(blinkOpacity + 0.25, 1); // 25% higher opacity\r\n            ctx.fillStyle = `rgba(255, 255, 255, ${bodyOpacity})`;\r\n            ctx.beginPath();\r\n            ctx.ellipse(\r\n                0, // Center x (already translated)\r\n                0, // Center y (already translated)\r\n                fireFlySize / 6, // Horizontal radius\r\n                fireFlySize / 12, // Vertical radius\r\n                0, // Rotation\r\n                0, // Start angle\r\n                Math.PI * 2 // End angle\r\n            );\r\n            ctx.fill();\r\n\r\n            ctx.restore(); // Restore canvas state\r\n\t\t\t\r\n\t\t\tif (CONFIG.debugFlightPath) {\r\n\t\t\t\t// ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';\r\n\t\t\t\t// ctx.beginPath();\r\n\t\t\t\t// ctx.moveTo(firefly.pointOriginX, firefly.pointOriginY); // Start point\r\n\t\t\t\t// ctx.lineTo(firefly.targetX, firefly.targetY); // Target point\r\n\t\t\t\tctx.stroke();\r\n                \r\n\t\t\t\t// True Origin (Yellow Dot)\r\n\t\t\t\tctx.fillStyle = 'rgba(255, 255, 0, 0.5)'; // Yellow\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\tctx.arc(firefly.originX, firefly.originY, firefly.size / 2, 0, Math.PI * 2);\r\n\t\t\t\tctx.fill();\r\n\t\t\t\t\r\n\t\t\t\t// Point Origin ()\r\n\t\t\t\t// ctx.fillStyle = 'rgba(0, 255, 255, 0.5)'; //\r\n\t\t\t\t// ctx.beginPath();\r\n\t\t\t\t// ctx.arc(firefly.pointOriginX, firefly.pointOriginY, firefly.size / 2, 0, Math.PI * 2);\r\n\t\t\t\t// ctx.fill();\r\n\t\t\t\t\r\n\t\t\t\t// Current XY (Green Dot)\r\n\t\t\t\t// ctx.fillStyle = 'rgba(0, 255, 0, 0.5)'; // Green\r\n\t\t\t\t// ctx.beginPath();\r\n\t\t\t\t// ctx.arc(firefly.x, firefly.y, firefly.size * 2, 0, Math.PI * 2);\r\n\t\t\t\t// ctx.fill();\r\n\t\t\t\t\r\n\t\t\t\t// Control Points (Blue Dots)\r\n                // ctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\r\n                // ctx.beginPath();\r\n                // ctx.arc(firefly.controlX, firefly.controlY, firefly.size / 4, 0, Math.PI * 2); // Blue dot at control point\r\n                // ctx.fill();\r\n\r\n                // Ensure flight angle is correctly defined\r\n                const flightAngle = Math.atan2(firefly.targetY - firefly.y, firefly.targetX - firefly.x); // Initial direction\r\n                const dx = firefly.controlX - firefly.x; // Control point relative to the fly's current position\r\n                const dy = firefly.controlY - firefly.y; // Same for y-coordinate\r\n\r\n                // Calculate the angle between the flight direction and the control point\r\n                const angleToControl = Math.atan2(dy, dx);\r\n                const relativeAngle = angleToControl - flightAngle;\r\n\r\n                // Normalize the relative angle to [-π, π]\r\n                const normalizedAngle = Math.atan2(Math.sin(relativeAngle), Math.cos(relativeAngle));\r\n\r\n                // Assign color based on the relative position\r\n                ctx.fillStyle = normalizedAngle > 0 ? 'rgba(0, 0, 255, 0.5)' : 'rgba(0, 255, 0, 0.5)'; // Blue (right), Green (left)\r\n                ctx.beginPath();\r\n                ctx.arc(firefly.controlX, firefly.controlY, firefly.size / 4, 0, Math.PI * 2); // Draw the control point\r\n                ctx.fill();\r\n\t\t\t\t\r\n\t\t\t\t// Destination Points (Red Dots)\r\n\t\t\t\tctx.fillStyle = 'rgba(255, 0, 0, 1)'; // Red\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\tctx.arc(firefly.targetX, firefly.targetY, firefly.size / 2, 0, Math.PI * 2);\r\n\t\t\t\tctx.fill();\r\n\r\n                // Bezier path\r\n                // ctx.beginPath();\r\n                // ctx.moveTo(firefly.pointOriginX, firefly.pointOriginY);\r\n                // ctx.quadraticCurveTo(firefly.controlX, firefly.controlY, firefly.targetX, firefly.targetY);\r\n                // ctx.strokeStyle = 'blue';\r\n                // ctx.stroke();\r\n\t\t\t\t\r\n\t\t\t\t// Fly rotation\r\n\t\t\t\tconst dotSize = firefly.size / 4; // Small red dot size\r\n\t\t\t\tconst tipX = firefly.x + Math.cos(firefly.angle) * firefly.size * 3; // Tip position X\r\n\t\t\t\tconst tipY = firefly.y + Math.sin(firefly.angle) * firefly.size * 3; // Tip position Y\r\n\r\n\t\t\t\tctx.fillStyle = 'rgba(255, 255, 255, 0.8)'; // Red color\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\tctx.arc(tipX, tipY, dotSize, 0, Math.PI * 2); // Red dot at the tip\r\n\t\t\t\tctx.fill();\r\n\t\t\t}\r\n\t\t\t\r\n        }\r\n    });\r\n}\r\n\r\n// Main loop for updating and rendering\r\nfunction updateFrequencyData() {\r\n    if (leftAnalyser && rightAnalyser) {\r\n        leftAnalyser.getByteFrequencyData(leftFrequencyData);\r\n        rightAnalyser.getByteFrequencyData(rightFrequencyData);\r\n    }\r\n\r\n    updateFireflies();\r\n    renderFireflies();\r\n\r\n    animationFrameId = requestAnimationFrame(updateFrequencyData);\r\n}\r\n\r\nfunction easingFunction(t) {\r\n    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\r\n}\r\n\r\nfunction calculateControlPoints({\r\n    originX = 0,\r\n    originY = 0,\r\n    targetX = 0,\r\n    targetY = 0,\r\n    distance = 1,\r\n    weightMin = CONFIG.controlPointWeightMin,\r\n    weightMax = CONFIG.controlPointWeightMax,\r\n    offsetMin = CONFIG.controlPointOffsetMin,\r\n    offsetMax = CONFIG.controlPointOffsetMax,\r\n}) {\r\n    const weight = weightMin + Math.random() * (weightMax - weightMin);\r\n    const baseX = originX + weight * (targetX - originX);\r\n    const baseY = originY + weight * (targetY - originY);\r\n\r\n    const offsetFactor = offsetMin + Math.random() * (offsetMax - offsetMin);\r\n    const offsetDistance = distance * offsetFactor;\r\n\r\n    // Check for degenerate case (origin == target)\r\n    const deltaX = targetX - originX;\r\n    const deltaY = targetY - originY;\r\n    // Randomly flip between clockwise and counterclockwise\r\n    const flipDirection = Math.random() < 0.5 ? 1 : -1;\r\n\r\n    // Calculate perpendicular angle with random flipping\r\n    const angle = deltaX === 0 && deltaY === 0 \r\n        ? Math.random() * Math.PI * 2 \r\n        : Math.atan2(deltaY, deltaX) + flipDirection * Math.PI / 2;\r\n\r\n    return {\r\n        controlX: baseX + Math.cos(angle) * offsetDistance,\r\n        controlY: baseY + Math.sin(angle) * offsetDistance,\r\n    };\r\n}\r\n\r\nfunction moveAlongBezierCurve({ firefly, originX, originY, controlX, controlY, targetX, targetY, progress }) {\r\n    const bezier = (p0, p1, p2, t) => Math.pow(1 - t, 2) * p0 + 2 * (1 - t) * t * p1 + Math.pow(t, 2) * p2;\r\n\tconst bezierTangent = (p0, p1, p2, t) => {\r\n\t\tconst dx = 2 * (1 - t) * (p1 - p0) + 2 * t * (p2 - p1); // Derivative for x\r\n\t\tconst dy = 2 * (1 - t) * (p2 - p1) + 2 * t * (p2 - p0); // Derivative for y\r\n\t\treturn { dx, dy };\r\n\t};\r\n\r\n    firefly.x = bezier(originX, controlX, targetX, progress);\r\n    firefly.y = bezier(originY, controlY, targetY, progress);\r\n\r\n    const { dx, dy } = bezierTangent(originX, controlX, targetX, progress);\r\n    firefly.angle = Math.atan2(dy, dx);\r\n}\r\n\r\nfunction calculateScaledLifespan(loudness) {\r\n    const t = Math.min(Math.max(loudness, 0), 1);\r\n\r\n    if (t < CONFIG.lifespanThreshold) {\r\n        // Scale loudness below threshold linearly to midLifespanSeconds\r\n        const scaled = t / CONFIG.lifespanThreshold;\r\n        return (CONFIG.minLifespanSeconds +\r\n            scaled * (CONFIG.midLifespanSeconds - CONFIG.minLifespanSeconds)) *\r\n            1000 / CONFIG.frameTime; // Convert seconds to frames\r\n    } else {\r\n        // Scale loudness above threshold to maxLifespanSeconds\r\n        const scaled = (t - CONFIG.lifespanThreshold) / (1 - CONFIG.lifespanThreshold);\r\n        return (CONFIG.midLifespanSeconds +\r\n            scaled * (CONFIG.maxLifespanSeconds - CONFIG.midLifespanSeconds)) *\r\n            1000 / CONFIG.frameTime; // Convert seconds to frames\r\n    }\r\n}\r\n\r\nfunction responseCurve(loudness) {\r\n    const midpoint = CONFIG.lifespanThreshold;\r\n    const belowType = CONFIG.responseTypeBelow; // Configurable response type below midpoint\r\n    const aboveType = CONFIG.responseTypeAbove; // Configurable response type above midpoint\r\n\r\n    const computeBelow = (loudness) => {\r\n        switch (belowType) {\r\n            case \"linear\":\r\n                return loudness / midpoint; // Linear scaling\r\n            case \"logarithmic\":\r\n                return Math.log(1 + (loudness / midpoint)) / Math.log(2); // Log base 2 scaling\r\n            case \"quadratic\":\r\n                return Math.pow(loudness / midpoint, 2); // Quadratic scaling\r\n            case \"cubic\":\r\n                return Math.pow(loudness / midpoint, 3); // Cubic scaling\r\n            case \"exponential\":\r\n                return Math.exp(loudness / midpoint) - 1; // Exponential growth\r\n            case \"hyperExponential\":\r\n                return (Math.exp(loudness / midpoint) - 1) * 2; // Doubled exponential effect\r\n            default:\r\n                return loudness; // Default to linear\r\n        }\r\n    };\r\n\r\n    const computeAbove = (relativeLoudness, baseValue) => {\r\n        switch (aboveType) {\r\n            case \"linear\":\r\n                return baseValue + relativeLoudness; // Linear scaling\r\n            case \"logarithmic\":\r\n                return baseValue + Math.log(1 + relativeLoudness) / Math.log(2); // Log base 2 scaling\r\n            case \"quadratic\":\r\n                return baseValue + Math.pow(relativeLoudness, 2); // Quadratic scaling\r\n            case \"cubic\":\r\n                return baseValue + Math.pow(relativeLoudness, 3) * 3; // Cubic scaling\r\n            case \"exponential\":\r\n                return baseValue + (Math.exp(relativeLoudness) - 1); // Exponential scaling\r\n            case \"hyperExponential\":\r\n                return baseValue + (Math.exp(relativeLoudness) - 1) * 2; // Doubled exponential effect\r\n            default:\r\n                return loudness; // Default to linear\r\n        }\r\n    };\r\n\r\n    if (loudness < midpoint) {\r\n        return computeBelow(loudness); // Below midpoint logic\r\n    } else {\r\n        const baseValue = computeBelow(midpoint); // Smooth transition value\r\n        const relativeLoudness = (loudness - midpoint) / (1 - midpoint);\r\n        return computeAbove(relativeLoudness, baseValue); // Above midpoint logic\r\n    }\r\n}\r\n\r\n// Audio setup and initialization\r\ndocument.getElementById('audioUpload').addEventListener('change', async (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n        audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        const arrayBuffer = await file.arrayBuffer();\r\n        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\r\n\r\n        // Create source and analyzers\r\n        audioSource = audioContext.createBufferSource();\r\n        audioSource.buffer = audioBuffer;\r\n        const splitter = audioContext.createChannelSplitter(2);\r\n\r\n        leftAnalyser = audioContext.createAnalyser();\r\n        rightAnalyser = audioContext.createAnalyser();\r\n\r\n        leftAnalyser.fftSize = 1024;\r\n        rightAnalyser.fftSize = 1024;\r\n\r\n        audioSource.connect(splitter);\r\n        splitter.connect(leftAnalyser, 0);\r\n        splitter.connect(rightAnalyser, 1);\r\n        audioSource.connect(audioContext.destination);\r\n\r\n        leftAnalyser.fftSize = CONFIG.fftSize;\r\n        rightAnalyser.fftSize = CONFIG.fftSize;\r\n\r\n        leftFrequencyData = new Uint8Array(leftAnalyser.frequencyBinCount);\r\n        rightFrequencyData = new Uint8Array(rightAnalyser.frequencyBinCount);\r\n\r\n\t\tfor (let i = 0; i < CONFIG.numFireflies; i++) {\r\n\t\t\tconst frequencyIndex = i % (leftAnalyser.frequencyBinCount / CONFIG.redundancyFactor);\r\n\r\n\t\t\t// Equal split for left and right channels\r\n            const isLeftChannel = i % 2 === 0; // Determine channel\r\n            const frequencySpread = frequencyIndex / (leftAnalyser.frequencyBinCount / CONFIG.redundancyFactor);\r\n            const originX = isLeftChannel\r\n                ? window.innerWidth * (0.5 - frequencySpread * 0.5) // Left: Center to Left\r\n                : window.innerWidth * (0.5 + frequencySpread * 0.5); // Right: Center to Right\r\n\t\t\tconst originY = window.innerHeight / 2; // Middle of the screen\r\n\t\t\t\r\n\t\t\tfireflies.push({\r\n\t\t\t\tfrequencyIndex,\r\n\t\t\t\tchannel: i % 2 === 0 ? 'left' : 'right',\r\n\t\t\t\toriginX,\r\n\t\t\t\toriginY,\r\n\t\t\t\tx: originX,\r\n\t\t\t\ty: originY,\r\n\t\t\t\tsize: CONFIG.fireflySize,\r\n\t\t\t\tglowIntensity: 0,\r\n\t\t\t\tlifeSpan: 0,\r\n\t\t\t\tfixedLoudness: 0,\r\n\t\t\t\tcurveTimer: 0,\r\n\t\t\t\tcurveInterval: 0,\r\n\t\t\t\ttargetX: 0,\r\n\t\t\t\ttargetY: 0,\r\n\t\t\t\tcontrolX: 0,\r\n\t\t\t\tcontrolY: 0,\r\n\t\t\t\tcurveProgress: 0\r\n\t\t\t});\r\n\t\t}\r\n\r\n        console.log(\"Audio loaded and fireflies initialized.\");\r\n        audioSource.start();\r\n        audioSource.onended = () => cancelAnimationFrame(animationFrameId);\r\n\r\n        updateFrequencyData();\r\n    }\r\n});"],"names":[],"version":3,"file":"firefly.dc19c322.js.map","sourceRoot":"/__parcel_source_root/"}